
AVRASM ver. 2.1.30  E:\University\00012-MP-L\6\Debug\List\program.asm Mon Apr 11 02:03:39 2022

E:\University\00012-MP-L\6\Debug\List\program.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1096): warning: Register r13 already defined by the .DEF directive
E:\University\00012-MP-L\6\Debug\List\program.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _h=R4
                 	.DEF _h_msb=R5
                 	.DEF _m=R6
                 	.DEF _m_msb=R7
                 	.DEF _s=R8
                 	.DEF _s_msb=R9
                 	.DEF _ms=R10
                 	.DEF _ms_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0078 	JMP  _timer1_compa_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0017
000034 003a      	.DB  0x17,0x0,0x3A,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000037 434c
000038 2044
000039 6c43
00003a 636f      	.DB  0x4C,0x43,0x44,0x20,0x43,0x6C,0x6F,0x63
00003b 006b
00003c 6425
00003d 0020
00003e 6425      	.DB  0x6B,0x0,0x25,0x64,0x20,0x0,0x25,0x64
E:\University\00012-MP-L\6\Debug\List\program.asm(1142): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x0
                 _0x2000003:
000040 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000041 0008      	.DW  0x08
000042 0004      	.DW  0x04
000043 0066      	.DW  __REG_VARS*2
                 
000044 000a      	.DW  0x0A
000045 0260      	.DW  _0x7
000046 006e      	.DW  _0x0*2
                 
000047 0002      	.DW  0x02
000048 028a      	.DW  __base_y_G100
000049 0080      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004b 94f8      	CLI
00004c 27ee      	CLR  R30
00004d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004e e0f1      	LDI  R31,1
00004f bffb      	OUT  GICR,R31
000050 bfeb      	OUT  GICR,R30
000051 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e8e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000070 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000071 bfed      	OUT  SPL,R30
000072 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000073 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000074 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000075 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000076 940c 00a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the CodeWizardAVR V3.43
                 ;Automatic Program Generator
                 ;? Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 ;
                 ;Project : Azmayesh_6
                 ;Version :
                 ;Date    : 5/7/2021
                 ;Author  : mohammad yarmogahdam
                 ;Company : IUST
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;
                 ;int h = 23;
                 ;int m = 58;
                 ;int s = 0;
                 ;int ms = 0;
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void) {
                 ; 0000 0020 interrupt [8] void timer1_compa_isr(void) {
                 
                 	.CSEG
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
000078 93ea      	ST   -Y,R30
000079 93fa      	ST   -Y,R31
00007a b7ef      	IN   R30,SREG
00007b 93ea      	ST   -Y,R30
                 ; 0000 0021     ms++;
00007c 01f5      	MOVW R30,R10
00007d 9631      	ADIW R30,1
00007e 015f      	MOVW R10,R30
                 ; 0000 0022     if (ms == 10) {
00007f e0ea      	LDI  R30,LOW(10)
000080 e0f0      	LDI  R31,HIGH(10)
000081 15ea      	CP   R30,R10
000082 05fb      	CPC  R31,R11
000083 f501      	BRNE _0x3
                 ; 0000 0023         ms = 0;
000084 24aa      	CLR  R10
000085 24bb      	CLR  R11
                 ; 0000 0024         s++;
000086 01f4      	MOVW R30,R8
000087 9631      	ADIW R30,1
000088 014f      	MOVW R8,R30
                 ; 0000 0025         if (s == 60) {
000089 e3ec      	LDI  R30,LOW(60)
00008a e0f0      	LDI  R31,HIGH(60)
00008b 15e8      	CP   R30,R8
00008c 05f9      	CPC  R31,R9
00008d f4b1      	BRNE _0x4
                 ; 0000 0026             s = 0;
00008e 2488      	CLR  R8
00008f 2499      	CLR  R9
                 ; 0000 0027             m++;
000090 01f3      	MOVW R30,R6
000091 9631      	ADIW R30,1
000092 013f      	MOVW R6,R30
                 ; 0000 0028             if (m == 60) {
000093 e3ec      	LDI  R30,LOW(60)
000094 e0f0      	LDI  R31,HIGH(60)
000095 15e6      	CP   R30,R6
000096 05f7      	CPC  R31,R7
000097 f461      	BRNE _0x5
                 ; 0000 0029                 m = 0;
000098 2466      	CLR  R6
000099 2477      	CLR  R7
                 ; 0000 002A                 h++;
00009a 01f2      	MOVW R30,R4
00009b 9631      	ADIW R30,1
00009c 012f      	MOVW R4,R30
                 ; 0000 002B                 if (h == 24) {
00009d e1e8      	LDI  R30,LOW(24)
00009e e0f0      	LDI  R31,HIGH(24)
00009f 15e4      	CP   R30,R4
0000a0 05f5      	CPC  R31,R5
0000a1 f411      	BRNE _0x6
                 ; 0000 002C                     h = 0;
0000a2 2444      	CLR  R4
0000a3 2455      	CLR  R5
                 ; 0000 002D                 }
                 ; 0000 002E             }
                 _0x6:
                 ; 0000 002F         }
                 _0x5:
                 ; 0000 0030     }
                 _0x4:
                 ; 0000 0031 }
                 _0x3:
0000a4 91e9      	LD   R30,Y+
0000a5 bfef      	OUT  SREG,R30
0000a6 91f9      	LD   R31,Y+
0000a7 91e9      	LD   R30,Y+
0000a8 9518      	RETI
                 ; .FEND
                 ;
                 ;char buffer[32];
                 ;
                 ;void main(void) {
                 ; 0000 0035 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0036 
                 ; 0000 0037     // PortC as output
                 ; 0000 0038     PORTC=0x00;
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bbe5      	OUT  0x15,R30
                 ; 0000 0039     DDRC=0xFF;
0000ab efef      	LDI  R30,LOW(255)
0000ac bbe4      	OUT  0x14,R30
                 ; 0000 003A     DDRC=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbe4      	OUT  0x14,R30
                 ; 0000 003B 
                 ; 0000 003C     // Timer 1 config
                 ; 0000 003D     TCCR1A=0x00;
0000af bdef      	OUT  0x2F,R30
                 ; 0000 003E     TCCR1B=0x02;
0000b0 e0e2      	LDI  R30,LOW(2)
0000b1 bdee      	OUT  0x2E,R30
                 ; 0000 003F     TCNT1H=0xCF;
0000b2 ecef      	LDI  R30,LOW(207)
0000b3 bded      	OUT  0x2D,R30
                 ; 0000 0040     TCNT1L=0x2C;
0000b4 e2ec      	LDI  R30,LOW(44)
0000b5 bdec      	OUT  0x2C,R30
                 ; 0000 0041     ICR1H=0x00;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bde7      	OUT  0x27,R30
                 ; 0000 0042     ICR1L=0x00;
0000b8 bde6      	OUT  0x26,R30
                 ; 0000 0043     OCR1AH=0x00;
0000b9 bdeb      	OUT  0x2B,R30
                 ; 0000 0044     OCR1AL=0x00;
0000ba bdea      	OUT  0x2A,R30
                 ; 0000 0045     OCR1BH=0x00;
0000bb bde9      	OUT  0x29,R30
                 ; 0000 0046     OCR1BL=0x00;
0000bc bde8      	OUT  0x28,R30
                 ; 0000 0047 
                 ; 0000 0048     TIMSK = 0x12;
0000bd e1e2      	LDI  R30,LOW(18)
0000be bfe9      	OUT  0x39,R30
                 ; 0000 0049 
                 ; 0000 004A     // Characters/line: 16
                 ; 0000 004B     lcd_init(16);
0000bf e1a0      	LDI  R26,LOW(16)
0000c0 d0a4      	RCALL _lcd_init
                 ; 0000 004C     lcd_gotoxy(4,0);
0000c1 e0e4      	LDI  R30,LOW(4)
0000c2 93ea      	ST   -Y,R30
0000c3 e0a0      	LDI  R26,LOW(0)
0000c4 d05f      	RCALL _lcd_gotoxy
                 ; 0000 004D     lcd_puts("LCD Clock");
                +
0000c5 e6a0     +LDI R26 , LOW ( _0x7 + ( 0 ) )
0000c6 e0b2     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
0000c7 d08c      	RCALL _lcd_puts
                 ; 0000 004E 
                 ; 0000 004F     // Global enable interrupts
                 ; 0000 0050     #asm("sei")
0000c8 9478      	sei
                 ; 0000 0051 
                 ; 0000 0052     while (1) {
                 _0x8:
                 ; 0000 0053         // hour
                 ; 0000 0054         lcd_gotoxy(3,1);
0000c9 e0e3      	LDI  R30,LOW(3)
0000ca 940e 0355 	CALL SUBOPT_0x0
                 ; 0000 0055         sprintf(buffer, "%d ", h);
0000cc 940e 0359 	CALL SUBOPT_0x1
0000ce 01f2      	MOVW R30,R4
0000cf 940e 0362 	CALL SUBOPT_0x2
                 ; 0000 0056         lcd_puts(buffer);
                 ; 0000 0057 
                 ; 0000 0058         lcd_gotoxy(5,1);
0000d1 e0e5      	LDI  R30,LOW(5)
0000d2 940e 0355 	CALL SUBOPT_0x0
                 ; 0000 0059         lcd_putchar(':');
0000d4 e3aa      	LDI  R26,LOW(58)
0000d5 d067      	RCALL _lcd_putchar
                 ; 0000 005A 
                 ; 0000 005B         // minute
                 ; 0000 005C         lcd_gotoxy(6,1);
0000d6 e0e6      	LDI  R30,LOW(6)
0000d7 940e 0355 	CALL SUBOPT_0x0
                 ; 0000 005D         sprintf(buffer, "%d ", m);
0000d9 940e 0359 	CALL SUBOPT_0x1
0000db 01f3      	MOVW R30,R6
0000dc 940e 0362 	CALL SUBOPT_0x2
                 ; 0000 005E         lcd_puts(buffer);
                 ; 0000 005F 
                 ; 0000 0060         lcd_gotoxy(8,1);
0000de e0e8      	LDI  R30,LOW(8)
0000df 940e 0355 	CALL SUBOPT_0x0
                 ; 0000 0061         lcd_putchar(':');
0000e1 e3aa      	LDI  R26,LOW(58)
0000e2 d05a      	RCALL _lcd_putchar
                 ; 0000 0062 
                 ; 0000 0063         // second
                 ; 0000 0064         lcd_gotoxy(9,1);
0000e3 e0e9      	LDI  R30,LOW(9)
0000e4 940e 0355 	CALL SUBOPT_0x0
                 ; 0000 0065         sprintf(buffer, "%d ", s);
0000e6 940e 0359 	CALL SUBOPT_0x1
0000e8 01f4      	MOVW R30,R8
0000e9 940e 0362 	CALL SUBOPT_0x2
                 ; 0000 0066         lcd_puts(buffer);
                 ; 0000 0067 
                 ; 0000 0068         lcd_gotoxy(11,1);
0000eb e0eb      	LDI  R30,LOW(11)
0000ec 940e 0355 	CALL SUBOPT_0x0
                 ; 0000 0069         lcd_putchar('.');
0000ee e2ae      	LDI  R26,LOW(46)
0000ef d04d      	RCALL _lcd_putchar
                 ; 0000 006A 
                 ; 0000 006B         // milisecond
                 ; 0000 006C         lcd_gotoxy(12,1);
0000f0 e0ec      	LDI  R30,LOW(12)
0000f1 940e 0355 	CALL SUBOPT_0x0
                 ; 0000 006D         sprintf(buffer, "%d", ms % 10);
0000f3 e6ea      	LDI  R30,LOW(_buffer)
0000f4 e0f2      	LDI  R31,HIGH(_buffer)
0000f5 93fa      	ST   -Y,R31
0000f6 93ea      	ST   -Y,R30
                +
0000f7 e7ec     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
0000f8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
0000f9 93fa      	ST   -Y,R31
0000fa 93ea      	ST   -Y,R30
0000fb 01d5      	MOVW R26,R10
0000fc e0ea      	LDI  R30,LOW(10)
0000fd e0f0      	LDI  R31,HIGH(10)
0000fe 940e 03d2 	CALL __MODW21
000100 940e 0362 	CALL SUBOPT_0x2
                 ; 0000 006E         lcd_puts(buffer);
                 ; 0000 006F     }
000102 cfc6      	RJMP _0x8
                 ; 0000 0070 }
                 _0xB:
000103 cfff      	RJMP _0xB
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000260           	.BYTE 0xA
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000104 93aa      	ST   -Y,R26
000105 b3e5      	IN   R30,0x15
000106 70ef      	ANDI R30,LOW(0xF)
000107 2fae      	MOV  R26,R30
000108 81e8      	LD   R30,Y
000109 7fe0      	ANDI R30,LOW(0xF0)
00010a 2bea      	OR   R30,R26
00010b bbe5      	OUT  0x15,R30
                +
00010c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00010f 9aaa      	SBI  0x15,2
                +
000110 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000111 958a     +DEC R24
000112 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000113 98aa      	CBI  0x15,2
                +
000114 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000115 958a     +DEC R24
000116 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000117 c07a      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000118 93aa      	ST   -Y,R26
000119 81a8      	LD   R26,Y
00011a dfe9      	RCALL __lcd_write_nibble_G100
00011b 81e8          ld    r30,y
00011c 95e2          swap  r30
00011d 83e8          st    y,r30
00011e 81a8      	LD   R26,Y
00011f dfe4      	RCALL __lcd_write_nibble_G100
                +
000120 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000121 958a     +DEC R24
000122 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000123 c06e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000124 93aa      	ST   -Y,R26
000125 81e8      	LD   R30,Y
000126 e0f0      	LDI  R31,0
000127 57e6      	SUBI R30,LOW(-__base_y_G100)
000128 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000129 81e0      	LD   R30,Z
00012a 81a9      	LDD  R26,Y+1
00012b 0fae      	ADD  R26,R30
00012c dfeb      	RCALL __lcd_write_data
00012d 80d9      	LDD  R13,Y+1
00012e 80c8      	LDD  R12,Y+0
00012f 9622      	ADIW R28,2
000130 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000131 e0a2      	LDI  R26,LOW(2)
000132 940e 036e 	CALL SUBOPT_0x3
000134 e0ac      	LDI  R26,LOW(12)
000135 dfe2      	RCALL __lcd_write_data
000136 e0a1      	LDI  R26,LOW(1)
000137 940e 036e 	CALL SUBOPT_0x3
000139 e0e0      	LDI  R30,LOW(0)
00013a 2ece      	MOV  R12,R30
00013b 2ede      	MOV  R13,R30
00013c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00013d 93aa      	ST   -Y,R26
00013e 81a8      	LD   R26,Y
00013f 30aa      	CPI  R26,LOW(0xA)
000140 f021      	BREQ _0x2000005
000141 91e0 028e 	LDS  R30,__lcd_maxx
000143 16de      	CP   R13,R30
000144 f048      	BRLO _0x2000004
                 _0x2000005:
000145 e0e0      	LDI  R30,LOW(0)
000146 93ea      	ST   -Y,R30
000147 94c3      	INC  R12
000148 2dac      	MOV  R26,R12
000149 dfda      	RCALL _lcd_gotoxy
00014a 81a8      	LD   R26,Y
00014b 30aa      	CPI  R26,LOW(0xA)
00014c f409      	BRNE _0x2000007
00014d c044      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
00014e 94d3      	INC  R13
00014f 9aa8      	SBI  0x15,0
000150 81a8      	LD   R26,Y
000151 dfc6      	RCALL __lcd_write_data
000152 98a8      	CBI  0x15,0
000153 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000154 93ba      	ST   -Y,R27
000155 93aa      	ST   -Y,R26
000156 931a      	ST   -Y,R17
                 _0x2000008:
000157 81a9      	LDD  R26,Y+1
000158 81ba      	LDD  R27,Y+1+1
000159 91ed      	LD   R30,X+
00015a 83a9      	STD  Y+1,R26
00015b 83ba      	STD  Y+1+1,R27
00015c 2f1e      	MOV  R17,R30
00015d 30e0      	CPI  R30,0
00015e f019      	BREQ _0x200000A
00015f 2fa1      	MOV  R26,R17
000160 dfdc      	RCALL _lcd_putchar
000161 cff5      	RJMP _0x2000008
                 _0x200000A:
000162 8118      	LDD  R17,Y+0
000163 9623      	ADIW R28,3
000164 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000165 93aa      	ST   -Y,R26
000166 b3e4      	IN   R30,0x14
000167 6fe0      	ORI  R30,LOW(0xF0)
000168 bbe4      	OUT  0x14,R30
000169 9aa2      	SBI  0x14,2
00016a 9aa0      	SBI  0x14,0
00016b 9aa1      	SBI  0x14,1
00016c 98aa      	CBI  0x15,2
00016d 98a8      	CBI  0x15,0
00016e 98a9      	CBI  0x15,1
00016f 81e8      	LD   R30,Y
000170 93e0 028e 	STS  __lcd_maxx,R30
000172 58e0      	SUBI R30,-LOW(128)
                +
000173 93e0 028c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000175 81e8      	LD   R30,Y
000176 54e0      	SUBI R30,-LOW(192)
                +
000177 93e0 028d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000179 e1a4      	LDI  R26,LOW(20)
00017a e0b0      	LDI  R27,0
00017b 940e 03a8 	CALL _delay_ms
00017d 940e 0374 	CALL SUBOPT_0x4
00017f 940e 0374 	CALL SUBOPT_0x4
000181 940e 0374 	CALL SUBOPT_0x4
000183 e2a0      	LDI  R26,LOW(32)
000184 df7f      	RCALL __lcd_write_nibble_G100
                +
000185 ec88     +LDI R24 , LOW ( 200 )
000186 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000187 9701     +SBIW R24 , 1
000188 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000189 e2a8      	LDI  R26,LOW(40)
00018a df8d      	RCALL __lcd_write_data
00018b e0a4      	LDI  R26,LOW(4)
00018c df8b      	RCALL __lcd_write_data
00018d e8a5      	LDI  R26,LOW(133)
00018e df89      	RCALL __lcd_write_data
00018f e0a6      	LDI  R26,LOW(6)
000190 df87      	RCALL __lcd_write_data
000191 df9f      	RCALL _lcd_clear
                 _0x2080002:
000192 9621      	ADIW R28,1
000193 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000194 93ba      	ST   -Y,R27
000195 93aa      	ST   -Y,R26
000196 931a      	ST   -Y,R17
000197 930a      	ST   -Y,R16
000198 81aa      	LDD  R26,Y+2
000199 81bb      	LDD  R27,Y+2+1
00019a 9612      	ADIW R26,2
00019b 940e 03e0 	CALL __GETW1P
00019d 9730      	SBIW R30,0
00019e f159      	BREQ _0x2020010
00019f 81aa      	LDD  R26,Y+2
0001a0 81bb      	LDD  R27,Y+2+1
0001a1 9614      	ADIW R26,4
0001a2 940e 03e0 	CALL __GETW1P
0001a4 018f      	MOVW R16,R30
0001a5 9730      	SBIW R30,0
0001a6 f061      	BREQ _0x2020012
                +
0001a7 3002     +CPI R16 , LOW ( 2 )
0001a8 e0e0     +LDI R30 , HIGH ( 2 )
0001a9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001aa f098      	BRLO _0x2020013
0001ab 01f8      	MOVW R30,R16
0001ac 9731      	SBIW R30,1
0001ad 018f      	MOVW R16,R30
                +
0001ae 81aa     +LDD R26 , Y + 2
0001af 81bb     +LDD R27 , Y + 2 + 1
0001b0 9614     +ADIW R26 , 4
0001b1 93ed     +ST X + , R30
0001b2 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001b3 81aa      	LDD  R26,Y+2
0001b4 81bb      	LDD  R27,Y+2+1
0001b5 9612      	ADIW R26,2
0001b6 91ed      	LD   R30,X+
0001b7 91fd      	LD   R31,X+
0001b8 9631      	ADIW R30,1
0001b9 93fe      	ST   -X,R31
0001ba 93ee      	ST   -X,R30
0001bb 9731      	SBIW R30,1
0001bc 81ac      	LDD  R26,Y+4
0001bd 83a0      	STD  Z+0,R26
                 _0x2020013:
0001be 81aa      	LDD  R26,Y+2
0001bf 81bb      	LDD  R27,Y+2+1
0001c0 940e 03e0 	CALL __GETW1P
0001c2 23ff      	TST  R31
0001c3 f02a      	BRMI _0x2020014
0001c4 91ed      	LD   R30,X+
0001c5 91fd      	LD   R31,X+
0001c6 9631      	ADIW R30,1
0001c7 93fe      	ST   -X,R31
0001c8 93ee      	ST   -X,R30
                 _0x2020014:
0001c9 c006      	RJMP _0x2020015
                 _0x2020010:
0001ca 81aa      	LDD  R26,Y+2
0001cb 81bb      	LDD  R27,Y+2+1
0001cc efef      	LDI  R30,LOW(65535)
0001cd efff      	LDI  R31,HIGH(65535)
0001ce 93ed      	ST   X+,R30
0001cf 93fc      	ST   X,R31
                 _0x2020015:
0001d0 8119      	LDD  R17,Y+1
0001d1 8108      	LDD  R16,Y+0
0001d2 9625      	ADIW R28,5
0001d3 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001d4 93ba      	ST   -Y,R27
0001d5 93aa      	ST   -Y,R26
0001d6 9726      	SBIW R28,6
0001d7 940e 03ed 	CALL __SAVELOCR6
0001d9 e010      	LDI  R17,0
0001da 85ac      	LDD  R26,Y+12
0001db 85bd      	LDD  R27,Y+12+1
0001dc e0e0      	LDI  R30,LOW(0)
0001dd e0f0      	LDI  R31,HIGH(0)
0001de 93ed      	ST   X+,R30
0001df 93fc      	ST   X,R31
                 _0x2020016:
0001e0 89ea      	LDD  R30,Y+18
0001e1 89fb      	LDD  R31,Y+18+1
0001e2 9631      	ADIW R30,1
0001e3 8bea      	STD  Y+18,R30
0001e4 8bfb      	STD  Y+18+1,R31
0001e5 9731      	SBIW R30,1
0001e6 91e4      	LPM  R30,Z
0001e7 2f2e      	MOV  R18,R30
0001e8 30e0      	CPI  R30,0
0001e9 f409      	BRNE PC+2
0001ea c115      	RJMP _0x2020018
0001eb 2fe1      	MOV  R30,R17
0001ec 30e0      	CPI  R30,0
0001ed f439      	BRNE _0x202001C
0001ee 3225      	CPI  R18,37
0001ef f411      	BRNE _0x202001D
0001f0 e011      	LDI  R17,LOW(1)
0001f1 c002      	RJMP _0x202001E
                 _0x202001D:
0001f2 940e 037c 	CALL SUBOPT_0x5
                 _0x202001E:
0001f4 c10a      	RJMP _0x202001B
                 _0x202001C:
0001f5 30e1      	CPI  R30,LOW(0x1)
0001f6 f4a9      	BRNE _0x202001F
0001f7 3225      	CPI  R18,37
0001f8 f419      	BRNE _0x2020020
0001f9 940e 037c 	CALL SUBOPT_0x5
0001fb c102      	RJMP _0x20200CC
                 _0x2020020:
0001fc e012      	LDI  R17,LOW(2)
0001fd e040      	LDI  R20,LOW(0)
0001fe e000      	LDI  R16,LOW(0)
0001ff 322d      	CPI  R18,45
000200 f411      	BRNE _0x2020021
000201 e001      	LDI  R16,LOW(1)
000202 c0fc      	RJMP _0x202001B
                 _0x2020021:
000203 322b      	CPI  R18,43
000204 f411      	BRNE _0x2020022
000205 e24b      	LDI  R20,LOW(43)
000206 c0f8      	RJMP _0x202001B
                 _0x2020022:
000207 3220      	CPI  R18,32
000208 f411      	BRNE _0x2020023
000209 e240      	LDI  R20,LOW(32)
00020a c0f4      	RJMP _0x202001B
                 _0x2020023:
00020b c002      	RJMP _0x2020024
                 _0x202001F:
00020c 30e2      	CPI  R30,LOW(0x2)
00020d f439      	BRNE _0x2020025
                 _0x2020024:
00020e e050      	LDI  R21,LOW(0)
00020f e013      	LDI  R17,LOW(3)
000210 3320      	CPI  R18,48
000211 f411      	BRNE _0x2020026
000212 6800      	ORI  R16,LOW(128)
000213 c0eb      	RJMP _0x202001B
                 _0x2020026:
000214 c003      	RJMP _0x2020027
                 _0x2020025:
000215 30e3      	CPI  R30,LOW(0x3)
000216 f009      	BREQ PC+2
000217 c0e7      	RJMP _0x202001B
                 _0x2020027:
000218 3320      	CPI  R18,48
000219 f010      	BRLO _0x202002A
00021a 332a      	CPI  R18,58
00021b f008      	BRLO _0x202002B
                 _0x202002A:
00021c c007      	RJMP _0x2020029
                 _0x202002B:
00021d e0aa      	LDI  R26,LOW(10)
00021e 9f5a      	MUL  R21,R26
00021f 2d50      	MOV  R21,R0
000220 2fe2      	MOV  R30,R18
000221 53e0      	SUBI R30,LOW(48)
000222 0f5e      	ADD  R21,R30
000223 c0db      	RJMP _0x202001B
                 _0x2020029:
000224 2fe2      	MOV  R30,R18
000225 36e3      	CPI  R30,LOW(0x63)
000226 f449      	BRNE _0x202002F
000227 940e 0383 	CALL SUBOPT_0x6
000229 89e8      	LDD  R30,Y+16
00022a 89f9      	LDD  R31,Y+16+1
00022b 81a4      	LDD  R26,Z+4
00022c 93aa      	ST   -Y,R26
00022d 940e 0389 	CALL SUBOPT_0x7
00022f c0ce      	RJMP _0x2020030
                 _0x202002F:
000230 37e3      	CPI  R30,LOW(0x73)
000231 f441      	BRNE _0x2020032
000232 940e 0383 	CALL SUBOPT_0x6
000234 940e 038f 	CALL SUBOPT_0x8
000236 940e 033c 	CALL _strlen
000238 2f1e      	MOV  R17,R30
000239 c00a      	RJMP _0x2020033
                 _0x2020032:
00023a 37e0      	CPI  R30,LOW(0x70)
00023b f461      	BRNE _0x2020035
00023c 940e 0383 	CALL SUBOPT_0x6
00023e 940e 038f 	CALL SUBOPT_0x8
000240 940e 0348 	CALL _strlenf
000242 2f1e      	MOV  R17,R30
000243 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000244 6002      	ORI  R16,LOW(2)
000245 770f      	ANDI R16,LOW(127)
000246 e030      	LDI  R19,LOW(0)
000247 c034      	RJMP _0x2020036
                 _0x2020035:
000248 36e4      	CPI  R30,LOW(0x64)
000249 f011      	BREQ _0x2020039
00024a 36e9      	CPI  R30,LOW(0x69)
00024b f411      	BRNE _0x202003A
                 _0x2020039:
00024c 6004      	ORI  R16,LOW(4)
00024d c002      	RJMP _0x202003B
                 _0x202003A:
00024e 37e5      	CPI  R30,LOW(0x75)
00024f f431      	BRNE _0x202003C
                 _0x202003B:
000250 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000251 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000252 83ee      	STD  Y+6,R30
000253 83ff      	STD  Y+6+1,R31
000254 e015      	LDI  R17,LOW(5)
000255 c00c      	RJMP _0x202003D
                 _0x202003C:
000256 35e8      	CPI  R30,LOW(0x58)
000257 f411      	BRNE _0x202003F
000258 6008      	ORI  R16,LOW(8)
000259 c003      	RJMP _0x2020040
                 _0x202003F:
00025a 37e8      	CPI  R30,LOW(0x78)
00025b f009      	BREQ PC+2
00025c c0a1      	RJMP _0x2020071
                 _0x2020040:
00025d e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00025e e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00025f 83ee      	STD  Y+6,R30
000260 83ff      	STD  Y+6+1,R31
000261 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000262 ff02      	SBRS R16,2
000263 c014      	RJMP _0x2020042
000264 940e 0383 	CALL SUBOPT_0x6
000266 940e 0399 	CALL SUBOPT_0x9
000268 85ab      	LDD  R26,Y+11
000269 23aa      	TST  R26
00026a f43a      	BRPL _0x2020043
00026b 85ea      	LDD  R30,Y+10
00026c 85fb      	LDD  R31,Y+10+1
00026d 940e 03b6 	CALL __ANEGW1
00026f 87ea      	STD  Y+10,R30
000270 87fb      	STD  Y+10+1,R31
000271 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000272 3040      	CPI  R20,0
000273 f011      	BREQ _0x2020044
000274 5f1f      	SUBI R17,-LOW(1)
000275 c001      	RJMP _0x2020045
                 _0x2020044:
000276 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000277 c004      	RJMP _0x2020046
                 _0x2020042:
000278 940e 0383 	CALL SUBOPT_0x6
00027a 940e 0399 	CALL SUBOPT_0x9
                 _0x2020046:
                 _0x2020036:
00027c fd00      	SBRC R16,0
00027d c011      	RJMP _0x2020047
                 _0x2020048:
00027e 1715      	CP   R17,R21
00027f f478      	BRSH _0x202004A
000280 ff07      	SBRS R16,7
000281 c008      	RJMP _0x202004B
000282 ff02      	SBRS R16,2
000283 c004      	RJMP _0x202004C
000284 7f0b      	ANDI R16,LOW(251)
000285 2f24      	MOV  R18,R20
000286 5011      	SUBI R17,LOW(1)
000287 c001      	RJMP _0x202004D
                 _0x202004C:
000288 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000289 c001      	RJMP _0x202004E
                 _0x202004B:
00028a e220      	LDI  R18,LOW(32)
                 _0x202004E:
00028b 940e 037c 	CALL SUBOPT_0x5
00028d 5051      	SUBI R21,LOW(1)
00028e cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00028f 2f31      	MOV  R19,R17
000290 ff01      	SBRS R16,1
000291 c017      	RJMP _0x202004F
                 _0x2020050:
000292 3030      	CPI  R19,0
000293 f0a1      	BREQ _0x2020052
000294 ff03      	SBRS R16,3
000295 c006      	RJMP _0x2020053
000296 81ee      	LDD  R30,Y+6
000297 81ff      	LDD  R31,Y+6+1
000298 9125      	LPM  R18,Z+
000299 83ee      	STD  Y+6,R30
00029a 83ff      	STD  Y+6+1,R31
00029b c005      	RJMP _0x2020054
                 _0x2020053:
00029c 81ae      	LDD  R26,Y+6
00029d 81bf      	LDD  R27,Y+6+1
00029e 912d      	LD   R18,X+
00029f 83ae      	STD  Y+6,R26
0002a0 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002a1 940e 037c 	CALL SUBOPT_0x5
0002a3 3050      	CPI  R21,0
0002a4 f009      	BREQ _0x2020055
0002a5 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002a6 5031      	SUBI R19,LOW(1)
0002a7 cfea      	RJMP _0x2020050
                 _0x2020052:
0002a8 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002a9 e320      	LDI  R18,LOW(48)
0002aa 81ee      	LDD  R30,Y+6
0002ab 81ff      	LDD  R31,Y+6+1
0002ac 940e 03e4 	CALL __GETW1PF
0002ae 87e8      	STD  Y+8,R30
0002af 87f9      	STD  Y+8+1,R31
0002b0 81ee      	LDD  R30,Y+6
0002b1 81ff      	LDD  R31,Y+6+1
0002b2 9632      	ADIW R30,2
0002b3 83ee      	STD  Y+6,R30
0002b4 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002b5 85e8      	LDD  R30,Y+8
0002b6 85f9      	LDD  R31,Y+8+1
0002b7 85aa      	LDD  R26,Y+10
0002b8 85bb      	LDD  R27,Y+10+1
0002b9 17ae      	CP   R26,R30
0002ba 07bf      	CPC  R27,R31
0002bb f050      	BRLO _0x202005C
0002bc 5f2f      	SUBI R18,-LOW(1)
0002bd 85a8      	LDD  R26,Y+8
0002be 85b9      	LDD  R27,Y+8+1
0002bf 85ea      	LDD  R30,Y+10
0002c0 85fb      	LDD  R31,Y+10+1
0002c1 1bea      	SUB  R30,R26
0002c2 0bfb      	SBC  R31,R27
0002c3 87ea      	STD  Y+10,R30
0002c4 87fb      	STD  Y+10+1,R31
0002c5 cfef      	RJMP _0x202005A
                 _0x202005C:
0002c6 332a      	CPI  R18,58
0002c7 f028      	BRLO _0x202005D
0002c8 ff03      	SBRS R16,3
0002c9 c002      	RJMP _0x202005E
0002ca 5f29      	SUBI R18,-LOW(7)
0002cb c001      	RJMP _0x202005F
                 _0x202005E:
0002cc 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002cd fd04      	SBRC R16,4
0002ce c01a      	RJMP _0x2020061
0002cf 3321      	CPI  R18,49
0002d0 f420      	BRSH _0x2020063
0002d1 85a8      	LDD  R26,Y+8
0002d2 85b9      	LDD  R27,Y+8+1
0002d3 9711      	SBIW R26,1
0002d4 f409      	BRNE _0x2020062
                 _0x2020063:
0002d5 c009      	RJMP _0x20200CD
                 _0x2020062:
0002d6 1753      	CP   R21,R19
0002d7 f010      	BRLO _0x2020067
0002d8 ff00      	SBRS R16,0
0002d9 c001      	RJMP _0x2020068
                 _0x2020067:
0002da c013      	RJMP _0x2020066
                 _0x2020068:
0002db e220      	LDI  R18,LOW(32)
0002dc ff07      	SBRS R16,7
0002dd c00b      	RJMP _0x2020069
0002de e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002df 6100      	ORI  R16,LOW(16)
0002e0 ff02      	SBRS R16,2
0002e1 c007      	RJMP _0x202006A
0002e2 7f0b      	ANDI R16,LOW(251)
0002e3 934a      	ST   -Y,R20
0002e4 940e 0389 	CALL SUBOPT_0x7
0002e6 3050      	CPI  R21,0
0002e7 f009      	BREQ _0x202006B
0002e8 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002e9 940e 037c 	CALL SUBOPT_0x5
0002eb 3050      	CPI  R21,0
0002ec f009      	BREQ _0x202006C
0002ed 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002ee 5031      	SUBI R19,LOW(1)
0002ef 85a8      	LDD  R26,Y+8
0002f0 85b9      	LDD  R27,Y+8+1
0002f1 9712      	SBIW R26,2
0002f2 f008      	BRLO _0x2020059
0002f3 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002f4 ff00      	SBRS R16,0
0002f5 c008      	RJMP _0x202006D
                 _0x202006E:
0002f6 3050      	CPI  R21,0
0002f7 f031      	BREQ _0x2020070
0002f8 5051      	SUBI R21,LOW(1)
0002f9 e2e0      	LDI  R30,LOW(32)
0002fa 93ea      	ST   -Y,R30
0002fb 940e 0389 	CALL SUBOPT_0x7
0002fd cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002fe e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002ff cee0      	RJMP _0x2020016
                 _0x2020018:
000300 85ac      	LDD  R26,Y+12
000301 85bd      	LDD  R27,Y+12+1
000302 940e 03e0 	CALL __GETW1P
000304 940e 03f4 	CALL __LOADLOCR6
000306 9664      	ADIW R28,20
000307 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000308 92ff      	PUSH R15
000309 2ef8      	MOV  R15,R24
00030a 9726      	SBIW R28,6
00030b 940e 03ef 	CALL __SAVELOCR4
00030d 940e 03a1 	CALL SUBOPT_0xA
00030f 9730      	SBIW R30,0
000310 f419      	BRNE _0x2020072
000311 efef      	LDI  R30,LOW(65535)
000312 efff      	LDI  R31,HIGH(65535)
000313 c023      	RJMP _0x2080001
                 _0x2020072:
000314 01de      	MOVW R26,R28
000315 9616      	ADIW R26,6
000316 940e 03b2 	CALL __ADDW2R15
000318 018d      	MOVW R16,R26
000319 940e 03a1 	CALL SUBOPT_0xA
00031b 83ee      	STD  Y+6,R30
00031c 83ff      	STD  Y+6+1,R31
00031d e0e0      	LDI  R30,LOW(0)
00031e 87e8      	STD  Y+8,R30
00031f 87e9      	STD  Y+8+1,R30
000320 01de      	MOVW R26,R28
000321 961a      	ADIW R26,10
000322 940e 03b2 	CALL __ADDW2R15
000324 940e 03e0 	CALL __GETW1P
000326 93fa      	ST   -Y,R31
000327 93ea      	ST   -Y,R30
000328 931a      	ST   -Y,R17
000329 930a      	ST   -Y,R16
00032a e9e4      	LDI  R30,LOW(_put_buff_G101)
00032b e0f1      	LDI  R31,HIGH(_put_buff_G101)
00032c 93fa      	ST   -Y,R31
00032d 93ea      	ST   -Y,R30
00032e 01de      	MOVW R26,R28
00032f 961a      	ADIW R26,10
000330 dea3      	RCALL __print_G101
000331 019f      	MOVW R18,R30
000332 81ae      	LDD  R26,Y+6
000333 81bf      	LDD  R27,Y+6+1
000334 e0e0      	LDI  R30,LOW(0)
000335 93ec      	ST   X,R30
000336 01f9      	MOVW R30,R18
                 _0x2080001:
000337 940e 03f6 	CALL __LOADLOCR4
000339 962a      	ADIW R28,10
00033a 90ff      	POP  R15
00033b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00033c 93ba      	ST   -Y,R27
00033d 93aa      	ST   -Y,R26
00033e 91a9          ld   r26,y+
00033f 91b9          ld   r27,y+
000340 27ee          clr  r30
000341 27ff          clr  r31
                 strlen0:
000342 916d          ld   r22,x+
000343 2366          tst  r22
000344 f011          breq strlen1
000345 9631          adiw r30,1
000346 cffb          rjmp strlen0
                 strlen1:
000347 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000348 93ba      	ST   -Y,R27
000349 93aa      	ST   -Y,R26
00034a 27aa          clr  r26
00034b 27bb          clr  r27
00034c 91e9          ld   r30,y+
00034d 91f9          ld   r31,y+
                 strlenf0:
00034e 9005      	lpm  r0,z+
00034f 2000          tst  r0
000350 f011          breq strlenf1
000351 9611          adiw r26,1
000352 cffb          rjmp strlenf0
                 strlenf1:
000353 01fd          movw r30,r26
000354 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buffer:
00026a           	.BYTE 0x20
                 __base_y_G100:
00028a           	.BYTE 0x4
                 __lcd_maxx:
00028e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
000355 93ea      	ST   -Y,R30
000356 e0a1      	LDI  R26,LOW(1)
000357 940c 0124 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000359 e6ea      	LDI  R30,LOW(_buffer)
00035a e0f2      	LDI  R31,HIGH(_buffer)
00035b 93fa      	ST   -Y,R31
00035c 93ea      	ST   -Y,R30
                +
00035d e7e8     +LDI R30 , LOW ( 2 * _0x0 + ( 10 ) )
00035e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 10 ) )
                 	__POINTW1FN _0x0,10
00035f 93fa      	ST   -Y,R31
000360 93ea      	ST   -Y,R30
000361 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x2:
000362 940e 03ba 	CALL __CWD1
000364 940e 03e8 	CALL __PUTPARD1
000366 e084      	LDI  R24,4
000367 940e 0308 	CALL _sprintf
000369 9628      	ADIW R28,8
00036a e6aa      	LDI  R26,LOW(_buffer)
00036b e0b2      	LDI  R27,HIGH(_buffer)
00036c 940c 0154 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00036e 940e 0118 	CALL __lcd_write_data
000370 e0a3      	LDI  R26,LOW(3)
000371 e0b0      	LDI  R27,0
000372 940c 03a8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000374 e3a0      	LDI  R26,LOW(48)
000375 940e 0104 	CALL __lcd_write_nibble_G100
                +
000377 ec88     +LDI R24 , LOW ( 200 )
000378 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000379 9701     +SBIW R24 , 1
00037a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00037b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
00037c 932a      	ST   -Y,R18
00037d 85ad      	LDD  R26,Y+13
00037e 85be      	LDD  R27,Y+13+1
00037f 85ef      	LDD  R30,Y+15
000380 89f8      	LDD  R31,Y+15+1
000381 9509      	ICALL
000382 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000383 89e8      	LDD  R30,Y+16
000384 89f9      	LDD  R31,Y+16+1
000385 9734      	SBIW R30,4
000386 8be8      	STD  Y+16,R30
000387 8bf9      	STD  Y+16+1,R31
000388 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000389 85ad      	LDD  R26,Y+13
00038a 85be      	LDD  R27,Y+13+1
00038b 85ef      	LDD  R30,Y+15
00038c 89f8      	LDD  R31,Y+15+1
00038d 9509      	ICALL
00038e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
00038f 89a8      	LDD  R26,Y+16
000390 89b9      	LDD  R27,Y+16+1
000391 9614      	ADIW R26,4
000392 940e 03e0 	CALL __GETW1P
000394 83ee      	STD  Y+6,R30
000395 83ff      	STD  Y+6+1,R31
000396 81ae      	LDD  R26,Y+6
000397 81bf      	LDD  R27,Y+6+1
000398 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000399 89a8      	LDD  R26,Y+16
00039a 89b9      	LDD  R27,Y+16+1
00039b 9614      	ADIW R26,4
00039c 940e 03e0 	CALL __GETW1P
00039e 87ea      	STD  Y+10,R30
00039f 87fb      	STD  Y+10+1,R31
0003a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003a1 01de      	MOVW R26,R28
0003a2 961c      	ADIW R26,12
0003a3 940e 03b2 	CALL __ADDW2R15
0003a5 940e 03e0 	CALL __GETW1P
0003a7 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003a8 9610      	adiw r26,0
0003a9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003aa ed80     +LDI R24 , LOW ( 0x7D0 )
0003ab e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003ac 9701     +SBIW R24 , 1
0003ad f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003ae 95a8      	wdr
0003af 9711      	sbiw r26,1
0003b0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003b1 9508      	ret
                 
                 __ADDW2R15:
0003b2 2400      	CLR  R0
0003b3 0daf      	ADD  R26,R15
0003b4 1db0      	ADC  R27,R0
0003b5 9508      	RET
                 
                 __ANEGW1:
0003b6 95f1      	NEG  R31
0003b7 95e1      	NEG  R30
0003b8 40f0      	SBCI R31,0
0003b9 9508      	RET
                 
                 __CWD1:
0003ba 2f6f      	MOV  R22,R31
0003bb 0f66      	ADD  R22,R22
0003bc 0b66      	SBC  R22,R22
0003bd 2f76      	MOV  R23,R22
0003be 9508      	RET
                 
                 __DIVW21U:
0003bf 2400      	CLR  R0
0003c0 2411      	CLR  R1
0003c1 e190      	LDI  R25,16
                 __DIVW21U1:
0003c2 0faa      	LSL  R26
0003c3 1fbb      	ROL  R27
0003c4 1c00      	ROL  R0
0003c5 1c11      	ROL  R1
0003c6 1a0e      	SUB  R0,R30
0003c7 0a1f      	SBC  R1,R31
0003c8 f418      	BRCC __DIVW21U2
0003c9 0e0e      	ADD  R0,R30
0003ca 1e1f      	ADC  R1,R31
0003cb c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003cc 60a1      	SBR  R26,1
                 __DIVW21U3:
0003cd 959a      	DEC  R25
0003ce f799      	BRNE __DIVW21U1
0003cf 01fd      	MOVW R30,R26
0003d0 01d0      	MOVW R26,R0
0003d1 9508      	RET
                 
                 __MODW21:
0003d2 94e8      	CLT
0003d3 ffb7      	SBRS R27,7
0003d4 c004      	RJMP __MODW211
0003d5 95a0      	COM  R26
0003d6 95b0      	COM  R27
0003d7 9611      	ADIW R26,1
0003d8 9468      	SET
                 __MODW211:
0003d9 fdf7      	SBRC R31,7
0003da dfdb      	RCALL __ANEGW1
0003db dfe3      	RCALL __DIVW21U
0003dc 01fd      	MOVW R30,R26
0003dd f40e      	BRTC __MODW212
0003de dfd7      	RCALL __ANEGW1
                 __MODW212:
0003df 9508      	RET
                 
                 __GETW1P:
0003e0 91ed      	LD   R30,X+
0003e1 91fc      	LD   R31,X
0003e2 9711      	SBIW R26,1
0003e3 9508      	RET
                 
                 __GETW1PF:
0003e4 9005      	LPM  R0,Z+
0003e5 91f4      	LPM  R31,Z
0003e6 2de0      	MOV  R30,R0
0003e7 9508      	RET
                 
                 __PUTPARD1:
0003e8 937a      	ST   -Y,R23
0003e9 936a      	ST   -Y,R22
0003ea 93fa      	ST   -Y,R31
0003eb 93ea      	ST   -Y,R30
0003ec 9508      	RET
                 
                 __SAVELOCR6:
0003ed 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003ee 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003ef 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003f0 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003f1 931a      	ST   -Y,R17
0003f2 930a      	ST   -Y,R16
0003f3 9508      	RET
                 
                 __LOADLOCR6:
0003f4 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003f5 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003f6 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003f7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003f8 8119      	LDD  R17,Y+1
0003f9 8108      	LD   R16,Y
0003fa 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  16 r1 :   5 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   5 r7 :   2 
r8 :   5 r9 :   2 r10:   5 r11:   2 r12:   4 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   7 r26: 110 r27:  41 r28:  14 r29:   1 r30: 217 r31:  76 
x  :  23 y  : 176 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  29 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  64 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   8 cpc   :   6 cpi   :  33 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  25 ld    :  28 ldd   :  76 ldi   : 121 
lds   :   1 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  19 movw  :  29 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  23 pop   :   1 push  :   1 rcall :  23 ret   :  28 
reti  :   1 rjmp  :  61 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   1 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  67 std   :  31 sts   :   3 sub   :   2 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 63 out of 116 (54.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007f6   1972     66   2038   32768   6.2%
[.dseg] 0x000060 0x00028f      0     47     47    2048   2.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
